version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-ecommerce}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network
    restart: unless-stopped

  backend:
    build: 
      context: ./backend-go
      dockerfile: Dockerfile
    container_name: ecommerce-backend
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    environment:
      - PORT=5000
      - GIN_MODE=${GIN_MODE:-release}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME:-ecommerce}
      - DB_SSLMODE=${DB_SSLMODE:-disable}
      - JWT_SECRET=${JWT_SECRET}
      - FRONTEND_URL=http://frontend:3000
      - REDIS_URL=redis:6379
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend-go/uploads:/root/uploads
    networks:
      - ecommerce-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ecommerce-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:${BACKEND_PORT:-5000}
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - backend
    networks:
      - ecommerce-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: ecommerce-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - ecommerce-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  ecommerce-network:
    driver: bridge
